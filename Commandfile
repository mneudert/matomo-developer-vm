Kernel.load(File.expand_path('./plugins/matomo.rb', @env.root_path))

chef_run_list  = ['recipe[matomo]']
config         = Matomo::Config.new
config_default = File.expand_path('./config.yml', @env.root_path)
config_local   = File.expand_path('./config.local.yml', @env.root_path)

config.parse_file(config_default) if File.exist?(config_default)
config.parse_file(config_local) if File.exist?(config_local)

command 'console',
    desc: 'Run a Matomo console command',
    parameters: { command: { optional: true } },
    script: %(cd /srv/matomo && ./console %{command})

command 'xdebug-disable',
    desc: 'Enables xdebug',
    script: %(sudo phpdismod xdebug)

command 'xdebug-enable',
    desc: 'Enables xdebug',
    script: %(sudo phpenmod xdebug)

command 'dump-export',
    desc: 'Dumps the matomo database currently used by the machine',
    script: %([ -d /vagrant/sqldumps ] || mkdir /vagrant/sqldumps;
              mysqldump \
                  -u#{config.get('mysql_username')} \
                  -p#{config.get('mysql_password')} \
                  #{config.get('mysql_database')} \
              > /vagrant/sqldumps/#{config.get('mysql_database')}.sql)

command 'dump-import',
    desc: 'Imports a recently created dump (from "dump-export")',
    script: %([ -f /vagrant/sqldumps/#{config.get('mysql_database')}.sql ] \
                  && mysql \
                         -u#{config.get('mysql_username')} \
                         -p#{config.get('mysql_password')} \
                         #{config.get('mysql_database')} \
                     < /vagrant/sqldumps/#{config.get('mysql_database')}.sql \
                  || true)

command 'mysql',
    desc: 'Opens a mysql console',
    script: %(mysql -u#{config.get('mysql_username')} -p#{config.get('mysql_password')} #{config.get('mysql_database')})

# device-detector specific commands
if File.directory?(File.expand_path(config.get('source_device_detector')))
    command 'dd-tests',
        desc: 'Run a device detector tests',
        parameters: {},
        script: %(cd /srv/device-detector && /srv/device-detector/vendor/bin/phpunit)

    command 'dd-parse',
        desc: 'Runs a device detection for given user agent',
        parameters: { agent: {} },
        script: %(cd /srv/device-detector && php misc/test.php '%{agent}')

    command 'dd-readme',
        desc: 'Generates device detector README report',
        parameters: {},
        script: %(cd /srv/device-detector && php misc/readme-report.php)
end

searchengine_social_list_path = File.expand_path(config.get('source_searchengine_social_list'))

if File.directory?(searchengine_social_list_path)
    command 'mount-searchlist',
        desc: 'Overwrites Matomos integrated search engine and socials list with configured repo',
        parameters: {},
        script: %(sudo mount --bind /srv/searchengine-and-social-list/ /srv/matomo/vendor/matomo/searchengine-and-social-list/)
    command 'unmount-searchlist',
        desc: 'Removes overwrite of Matomos integrated search engine and socials list with configured repo',
        parameters: {},
        script: %(sudo umount /srv/matomo/vendor/matomo/searchengine-and-social-list/)
end

matomo_tracker_path = File.expand_path(config.get('source_matomo_tracker'))

if File.directory?(matomo_tracker_path)
    command 'mount-tracker',
        desc: 'Overwrites Matomos integrated php tracker with configured repo',
        parameters: {},
        script: %(sudo mount --bind /srv/php-tracker/ /srv/matomo/vendor/matomo/matomo-php-tracker/)
    command 'unmount-tracker',
        desc: 'Removes overwrite of Matomos integrated php tracker with configured repo',
        parameters: {},
        script: %(sudo umount /srv/matomo/vendor/matomo/matomo-php-tracker/)
end